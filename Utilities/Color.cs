namespace Pure.Utilities
{
	public struct Color
	{
		public const byte Black = 0b_000_000_00;
		public const byte Gray = 0b_010_010_01; // 127 127 127
		public const byte White = 0b_111_111_11;

		public const byte Red = 0b_111_000_00;
		public const byte Green = 0b_000_111_00;
		public const byte Blue = 0b_000_000_11;

		public const byte Pink = 0b_111_011_10; // 255 105 180
		public const byte Magenta = 0b_111_000_11; // 255 0 255
		public const byte Violet = 0b_100_000_11; // 143 0 255;
		public const byte Purple = 0b_011_000_10; // 75 0 130;

		public const byte Yellow = 0b_111_111_00; // 255 255 0;
		public const byte Orange = 0b_111_010_00; // 255 165 0;
		public const byte Brown = 0b_010_001_00; // 150 105 25;

		public const byte Cyan = 0b_000_111_11; // 0 255 255;
		public const byte Azure = 0b_000_011_11; // 0 127 255;

		public byte R
		{
			get => red;
			set { red = value; UpdateValue(); }
		}
		public byte G
		{
			get => green;
			set { green = value; UpdateValue(); }
		}
		public byte B
		{
			get => blue;
			set { blue = value; UpdateValue(); }
		}

		public Color(byte value)
		{
			this.value = 0;
			red = 0;
			green = 0;
			blue = 0;

			Value = value;
		}
		public Color(byte red, byte green, byte blue)
		{
			value = 0;
			this.red = 0;
			this.green = 0;
			this.blue = 0;

			R = red;
			G = green;
			B = blue;
		}

		public static implicit operator Color((byte, byte, byte) rgb)
		{
			return new Color(rgb.Item1, rgb.Item2, rgb.Item3);
		}
		public static implicit operator (byte, byte, byte)(Color color)
		{
			return (color.R, color.G, color.B);
		}
		public static implicit operator Color(byte value)
		{
			return new Color(value);
		}
		public static implicit operator byte(Color color)
		{
			return color.value;
		}

		public static bool operator ==(Color a, Color b) => a.value == b.value;
		public static bool operator !=(Color a, Color b) => a.value != b.value;

		public override int GetHashCode() => base.GetHashCode();
		public override bool Equals(object? obj) => base.Equals(obj);
		public override string ToString()
		{
			return $"{value} | {red} {green} {blue}";
		}

		#region Backend
		private static readonly List<(byte, byte, byte)> lookup = new()
		{
			(0,0,0),(0,0,85),(0,0,170),(0,0,255),(0,36,0),(0,36,85),(0,36,170),(0,36,255),
			(0,72,0),(0,72,85),(0,72,170),(0,72,255),(0,109,0),(0,109,85),(0,109,170),
			(0,109,255),(0,145,0),(0,145,85),(0,145,170),(0,145,255),(0,182,0),(0,182,85),
			(0,182,170),(0,182,255),(0,218,0),(0,218,85),(0,218,170),(0,218,255),(0,255,0),
			(0,255,85),(0,255,170),(0,255,255),(36,0,0),(36,0,85),(36,0,170),(36,0,255),
			(36,36,0),(36,36,85),(36,36,170),(36,36,255),(36,72,0),(36,72,85),(36,72,170),
			(36,72,255),(36,109,0),(36,109,85),(36,109,170),(36,109,255),(36,145,0),(36,145,85),
			(36,145,170),(36,145,255),(36,182,0),(36,182,85),(36,182,170),(36,182,255),
			(36,218,0),(36,218,85),(36,218,170),(36,218,255),(36,255,0),(36,255,85),(36,255,170),
			(36,255,255),(72,0,0),(72,0,85),(72,0,170),(72,0,255),(72,36,0),(72,36,85),
			(72,36,170),(72,36,255),(72,72,0),(72,72,85),(72,72,170),(72,72,255),(72,109,0),
			(72,109,85),(72,109,170),(72,109,255),(72,145,0),(72,145,85),(72,145,170),
			(72,145,255),(72,182,0),(72,182,85),(72,182,170),(72,182,255),(72,218,0),(72,218,85),
			(72,218,170),(72,218,255),(72,255,0),(72,255,85),(72,255,170),(72,255,255),(109,0,0),
			(109,0,85),(109,0,170),(109,0,255),(109,36,0),(109,36,85),(109,36,170),(109,36,255),
			(109,72,0),(109,72,85),(109,72,170),(109,72,255),(109,109,0),(109,109,85),
			(109,109,170),(109,109,255),(109,145,0),(109,145,85),(109,145,170),(109,145,255),
			(109,182,0),(109,182,85),(109,182,170),(109,182,255),(109,218,0),(109,218,85),
			(109,218,170),(109,218,255),(109,255,0),(109,255,85),(109,255,170),(109,255,255),
			(145,0,0),(145,0,85),(145,0,170),(145,0,255),(145,36,0),(145,36,85),(145,36,170),
			(145,36,255),(145,72,0),(145,72,85),(145,72,170),(145,72,255),(145,109,0),
			(145,109,85),(145,109,170),(145,109,255),(145,145,0),(145,145,85),(145,145,170),
			(145,145,255),(145,182,0),(145,182,85),(145,182,170),(145,182,255),(145,218,0),
			(145,218,85),(145,218,170),(145,218,255),(145,255,0),(145,255,85),(145,255,170),
			(145,255,255),(182,0,0),(182,0,85),(182,0,170),(182,0,255),(182,36,0),(182,36,85),
			(182,36,170),(182,36,255),(182,72,0),(182,72,85),(182,72,170),(182,72,255),
			(182,109,0),(182,109,85),(182,109,170),(182,109,255),(182,145,0),(182,145,85),
			(182,145,170),(182,145,255),(182,182,0),(182,182,85),(182,182,170),(182,182,255),
			(182,218,0),(182,218,85),(182,218,170),(182,218,255),(182,255,0),(182,255,85),
			(182,255,170),(182,255,255),(218,0,0),(218,0,85),(218,0,170),(218,0,255),(218,36,0),
			(218,36,85),(218,36,170),(218,36,255),(218,72,0),(218,72,85),(218,72,170),
			(218,72,255),(218,109,0),(218,109,85),(218,109,170),(218,109,255),(218,145,0),
			(218,145,85),(218,145,170),(218,145,255),(218,182,0),(218,182,85),(218,182,170),
			(218,182,255),(218,218,0),(218,218,85),(218,218,170),(218,218,255),(218,255,0),
			(218,255,85),(218,255,170),(218,255,255),(255,0,0),(255,0,85),(255,0,170),
			(255,0,255),(255,36,0),(255,36,85),(255,36,170),(255,36,255),(255,72,0),(255,72,85),
			(255,72,170),(255,72,255),(255,109,0),(255,109,85),(255,109,170),(255,109,255),
			(255,145,0),(255,145,85),(255,145,170),(255,145,255),(255,182,0),(255,182,85),
			(255,182,170),(255,182,255),(255,218,0),(255,218,85),(255,218,170),(255,218,255),
			(255,255,0),(255,255,85),(255,255,170),(255,255,255),
		};

		private byte Value
		{
			get => value;
			set { this.value = value; UpdateRGB(); }
		}
		private byte value, red, green, blue;

		private void UpdateRGB()
		{
			var (r, g, b) = lookup[Value];
			red = r;
			green = g;
			blue = b;
		}
		private void UpdateValue()
		{
			Value = (byte)lookup.IndexOf((R, G, B));
		}
		#endregion
	}
}
